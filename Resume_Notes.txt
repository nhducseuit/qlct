Sprint 2, focusing on "Multi-User Synchronization & Cloud Backend," has been successfully completed. Key accomplishments include:

Backend: Fully functional CRUD APIs for Categories, Household Members, and Transactions are complete. A real-time synchronization mechanism using WebSockets (via NotificationsGateway) has been implemented and integrated into these backend services.
Frontend: Pinia stores (categoryStore, householdMemberStore, transactionStore) have been refactored to integrate with the new backend APIs and WebSockets. The socketService was also improved for robust connection management. Real-time UI updates for all three entities have been thoroughly tested and confirmed stable across multiple browser tabs.
Development Environment: The Docker environment has been stabilized. Authentication is currently bypassed for development mode, with the system using a default 'dev-user'. UI updates in the stores are primarily driven by WebSocket events, with optimistic updates deferred for now.
The project is now ready to move into Sprint 3. The immediate next focus will likely be on completing the remaining frontend UI tasks from Sprint 2, starting with the Category Management UI (S2.3.9).

---

**Recent Refinements & Fixes (Post-Sprint 2):**

*   **WebSocket Stability:** Resolved issues causing WebSocket connections to drop or listeners to become detached, particularly after page navigation or specific store actions. This involved:
    *   Refining `authStore` logic for development mode to prevent unintended listener clearing.
    *   Removing unnecessary `onUnmounted` hooks from Pinia stores.
*   **Frontend UI/UX Enhancements:**
    *   `QuickEntryForm.vue`: Prevented date field from resetting after successful transaction submission.
    *   `QuickEntryForm.vue`: Ensured correct hierarchical display order for categories in the selection dropdown.
    *   `QuickEntryForm.vue`: Improved usability of the "Ch·ªçn nhanh" (pinned categories) section on mobile devices (increased height, adjusted text size).
    *   Applied "Times New Roman" as the global font family for consistent styling.
    *   **Authentication:** Modified `JwtAuthGuard` in the backend to consistently allow 'dev-user' access for HTTP APIs in development mode, aligning with WebSocket dev authentication.
*   **Backend Seeding:** Added seed data for `PredefinedSplitRatio` to provide default sharing options.

**Sprint Progress & Key Achievements:**
*   Sprint 2 (Multi-User Synchronization & Cloud Backend) is complete.
*   **Sprint 3 (Financial Summaries & Analytics)** is currently in progress. See `sprint-3.md` for detailed objectives and progress.
    *   **Backend:**
        *   Summary APIs (totals, category breakdown, member breakdown, budget trend) enhanced to support filtering by selected household members.
        *   Added a new backend endpoint and service method to query transactions with detailed filters (category, period, members) to support report drill-downs.
    *   **Frontend (Reports Page):**
        *   Implemented a global multi-select filter for Household Members.
        *   **Category Breakdown Report:**
            *   Made charts (pie and bar) interactive: clicking a category shows its detailed transactions.
            *   Added a transaction detail table that appears when a category is selected (from table or charts).
            *   Included a button to navigate to the full transaction list from the detail view.
        *   **Member Breakdown Report:**
            *   Added a bar chart to visualize income/expenses per member.
            *   The entire section is now collapsible by default.
        *   Resolved various TypeScript, ESLint, and API integration issues for robust report generation.

    *   **UAT Feedback & Enhancements (Sprint 3):**
        *   **Transaction Forms (QuickEntry & Dialog):**
            *   Reordered the "Payer" field in both forms to appear directly below the date for a more intuitive data entry flow.
            *   Fixed amount validation in `TransactionFormDialog` to correctly handle formatted numbers, ensuring consistent behavior across forms.
        *   **QuickEntryForm:**
            *   Fixed issue preventing falsy validation errors after successful transaction addition by using `nextTick`.
            *   Ensured the "Payer" field retains its value after a successful transaction addition.
        *   **Reporting:** Implemented a user-controlled global filter (checkbox) to exclude/include income transactions from all reports, with backend services updated to respect this filter. Income aggregation logic in `CategoryBreakdown` and `MemberBreakdown` services was corrected to display income when not excluded.
        *   **Reporting (Strict Mode & Filters):**
            *   Resolved issues with the initial default view of the reports page (Strict Mode OFF, no member filters) now correctly displaying data. This involved ensuring the frontend consistently sends `isStrictMode=false` and the backend correctly interprets this parameter, including changing DTOs to accept `isStrictMode` as a string (`"true"`/`"false"`) and parsing it explicitly in the service layer to avoid DTO transformation ambiguities.
            *   Corrected budget trend chart calculations to accurately reflect member-specific expense portions when member filters are active in non-strict mode.
            *   Fixed an issue where applying a predefined share ratio in `QuickEntryForm` did not update the percentage inputs in the UI by refactoring state management to use a more robust `computed` property.
            *   Fixed frontend error "Cannot read properties of null (reading 'length')" when no members were selected with strict mode active by adding null checks in `ReportsPage.vue`.
            *   Most strict mode test cases (TC3.x series) are now passing, with the UI correctly displaying "No data" messages when the filtering logic results in an empty dataset as per test case definitions.
        *   **PDF Export:** Added client-side PDF export functionality for reports using `jspdf` and `html2canvas`, including layout adjustments for A4 portrait and basic pagination. Optimized image scale and provided print-specific CSS for better PDF output and reduced file size.
        *   **UI (Reports Page):** Improved layout of global filter action buttons, preventing the "View Report" button from appearing square.

*   **Sprint 4 (Shared Expense Balancing & Settlements)** - In Progress:
    *   **Backend:**
        *   Defined `Settlement` data model in Prisma schema, including relationships with `User` and `HouseholdMember`.
        *   Implemented API endpoint (`GET /settlements/balances`) and service logic to calculate net balances between household members. The calculation considers shared transactions, their split ratios, and adjusts for any previously recorded settlements.
        *   Implemented API endpoint (`POST /settlements`) and service logic to record new settlements between members, including validation for payer/payee and active status.
        *   Created necessary DTOs (`MemberBalanceDto`, `DetailedMemberBalanceDto`, `BalancesResponseDto`, `CreateSettlementDto`, `SettlementDto`) for these operations.
    *   **Frontend (Settlements Feature):**
        *   Created `settlementStore.ts` (Pinia) to manage state and API interactions for balances, settlement recording, and history.
        *   Developed `BalancesView.vue` to display member balances with clear, user-friendly language.
        *   Implemented `RecordSettlementDialog.vue` for users to log new settlements, integrated into `BalancesView.vue`.
        *   Created `SettlementHistory.vue` component structure for displaying past settlements (integration pending).
**Next Sprints:**
*   **Authentication (Started):** Began implementing real user authentication. Completed backend setup including AuthModule, AuthService, AuthController, JWT/Local strategies, guards, DTOs, and updating the seed script to create a test user. Protected core backend routes with JWT authentication. Frontend implementation (Login/Register pages, auth store logic) is the next focus.
    *   **Frontend Implementation (Completed):**
        *   Created `LoginPage.vue` component.
        *   Updated `RegisterPage.vue` to use the backend `/auth/register` API.
        *   Updated `authStore.ts` to handle real login/registration API calls, store JWT token in LocalStorage, manage user state (`isAuthenticated`, `user`), and implement logout logic.
        *   Updated `api.ts` interceptor to attach the real JWT token to requests and handle 401 Unauthorized errors by clearing auth state and redirecting to login.
        *   Updated router guards (`router/index.ts`) to use the real authentication state from `authStore` for route protection and redirect authenticated users from login/register pages.
        *   Added a logout button to `MainLayout.vue`, visible when authenticated.
        *   Resolved various TypeScript and ESLint errors across frontend stores and components related to authentication integration.
        *   Removed frontend development user bypass logic.
    *   **Status:** Frontend authentication flow (Login, Register, Logout, Route Protection, API Integration) is now largely complete and errors have been resolved.
    *   **Current Development State (Authentication Gate, Global Data Access, Report Filtering):**
        *   **Authentication:** The `JwtAuthGuard` is now active on all backend controllers. All API requests require a valid JWT token.
        *   **Authorization:** Per request, authorization has been removed at the data level. Any authenticated user can view and interact with **all** data (transactions, categories, etc.) from **all other users**. The `userId` is still used to stamp newly created records but is ignored for fetching/filtering lists of data. This effectively makes the application single-tenant for all authenticated users.
        *   **Report Filtering Consistency:** The transaction detail table on the Reports page now correctly applies the `isStrictMode`, `memberIds`, and `transactionType` filters, ensuring consistency with the charts above it. This involved updating the `/transactions` API and fixing a 400 Bad Request error by correcting array serialization in the frontend.

*   Sprint 4: Shared Expense Balancing & Settlements
*   **Sprint 5: Foundational Data Model Refactor** - In Progress. Architecting a new "Big Family" / "Small Family" data model to support hierarchical financial management and granular data ownership, paving the way for advanced, per-family reporting features.