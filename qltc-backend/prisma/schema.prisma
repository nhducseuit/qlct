// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Family {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Self-relation for Big Family / Small Family structure
  parentId String?
  parent   Family?  @relation("SubFamilies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Family[] @relation("SubFamilies")

  users                 User[]
  categories            Category[]
  transactions          Transaction[]
  memberships           HouseholdMembership[]
  predefinedSplitRatios PredefinedSplitRatio[]
  // settlements           Settlement[]  // Removed: now person-centric
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String // Stores hashed password
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model Category {
  id                String   @id @default(uuid())
  key               String?  @unique
  name              String
  parentId          String?
  icon              String?
  color             String?
  isPinned          Boolean  @default(false)
  order             Int?
  isHidden          Boolean  @default(false)
  budgetLimit       Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  defaultSplitRatio Json?

  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  parent        Category?     @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories Category[]    @relation("SubCategories")
  transactions  Transaction[]
}

model Transaction {
  id         String   @id @default(uuid())
  amount     Float
  date       DateTime
  note       String?
  type       String
  payer      String?
  isShared   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  splitRatio Json?

  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  payerMembership HouseholdMembership? @relation("PayerTransactions", fields: [payer], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Person {
  id                 String                @id @default(uuid())
  name               String
  email              String?               @unique
  phone              String?
  socialId           String?               @unique
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  memberships        HouseholdMembership[]
  settlementsAsPayer Settlement[]          @relation("SettlementPayer")
  settlementsAsPayee Settlement[]          @relation("SettlementPayee")
}

model HouseholdMembership {
  id        String   @id @default(uuid())
  personId  String
  familyId  String
  isActive  Boolean  @default(true)
  order     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  // paidSettlements     Settlement[] @relation("PaidSettlements") // Removed: now person-centric
  // receivedSettlements Settlement[] @relation("ReceivedSettlements") // Removed: now person-centric
  transactionsAsPayer Transaction[] @relation("PayerTransactions")

  @@unique([personId, familyId])
  @@index([familyId])
  @@index([personId])
}

model PredefinedSplitRatio {
  id         String @id @default(uuid())
  name       String
  splitRatio Json
  familyId   String
  family     Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([familyId, name])
  @@index([familyId])
}

model Settlement {
  id        String   @id @default(uuid())
  payerId   String
  payeeId   String
  amount    Decimal
  note      String?
  createdAt DateTime @default(now())
  createdBy String

  payer Person @relation("SettlementPayer", fields: [payerId], references: [id])
  payee Person @relation("SettlementPayee", fields: [payeeId], references: [id])

  @@index([payerId])
  @@index([payeeId])
  @@index([createdBy])
}
